// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package teacher

import (
	"github.com/yaattc/automatic-time-table-creation/backend/app/store"
	"sync"
)

// Ensure, that InterfaceMock does implement Interface.
// If this is not the case, regenerate this file with moq.
var _ Interface = &InterfaceMock{}

// InterfaceMock is a mock implementation of Interface.
//
//     func TestSomethingThatUsesInterface(t *testing.T) {
//
//         // make and configure a mocked Interface
//         mockedInterface := &InterfaceMock{
//             AddTeacherFunc: func(teacher store.TeacherDetails) (string, error) {
// 	               panic("mock out the AddTeacher method")
//             },
//             DeleteTeacherFunc: func(teacherID string) error {
// 	               panic("mock out the DeleteTeacher method")
//             },
//             GetTeacherDetailsFunc: func(teacherID string) (store.TeacherDetails, error) {
// 	               panic("mock out the GetTeacherDetails method")
//             },
//             GetTeacherFullFunc: func(teacherID string) (store.Teacher, error) {
// 	               panic("mock out the GetTeacherFull method")
//             },
//             ListTeachersFunc: func() ([]store.TeacherDetails, error) {
// 	               panic("mock out the ListTeachers method")
//             },
//             SetPreferencesFunc: func(teacherID string, pref store.TeacherPreferences) error {
// 	               panic("mock out the SetPreferences method")
//             },
//         }
//
//         // use mockedInterface in code that requires Interface
//         // and then make assertions.
//
//     }
type InterfaceMock struct {
	// AddTeacherFunc mocks the AddTeacher method.
	AddTeacherFunc func(teacher store.TeacherDetails) (string, error)

	// DeleteTeacherFunc mocks the DeleteTeacher method.
	DeleteTeacherFunc func(teacherID string) error

	// GetTeacherDetailsFunc mocks the GetTeacherDetails method.
	GetTeacherDetailsFunc func(teacherID string) (store.TeacherDetails, error)

	// GetTeacherFullFunc mocks the GetTeacherFull method.
	GetTeacherFullFunc func(teacherID string) (store.Teacher, error)

	// ListTeachersFunc mocks the ListTeachers method.
	ListTeachersFunc func() ([]store.TeacherDetails, error)

	// SetPreferencesFunc mocks the SetPreferences method.
	SetPreferencesFunc func(teacherID string, pref store.TeacherPreferences) error

	// calls tracks calls to the methods.
	calls struct {
		// AddTeacher holds details about calls to the AddTeacher method.
		AddTeacher []struct {
			// Teacher is the teacher argument value.
			Teacher store.TeacherDetails
		}
		// DeleteTeacher holds details about calls to the DeleteTeacher method.
		DeleteTeacher []struct {
			// TeacherID is the teacherID argument value.
			TeacherID string
		}
		// GetTeacherDetails holds details about calls to the GetTeacherDetails method.
		GetTeacherDetails []struct {
			// TeacherID is the teacherID argument value.
			TeacherID string
		}
		// GetTeacherFull holds details about calls to the GetTeacherFull method.
		GetTeacherFull []struct {
			// TeacherID is the teacherID argument value.
			TeacherID string
		}
		// ListTeachers holds details about calls to the ListTeachers method.
		ListTeachers []struct {
		}
		// SetPreferences holds details about calls to the SetPreferences method.
		SetPreferences []struct {
			// TeacherID is the teacherID argument value.
			TeacherID string
			// Pref is the pref argument value.
			Pref store.TeacherPreferences
		}
	}
	lockAddTeacher        sync.RWMutex
	lockDeleteTeacher     sync.RWMutex
	lockGetTeacherDetails sync.RWMutex
	lockGetTeacherFull    sync.RWMutex
	lockListTeachers      sync.RWMutex
	lockSetPreferences    sync.RWMutex
}

// AddTeacher calls AddTeacherFunc.
func (mock *InterfaceMock) AddTeacher(teacher store.TeacherDetails) (string, error) {
	if mock.AddTeacherFunc == nil {
		panic("InterfaceMock.AddTeacherFunc: method is nil but Interface.AddTeacher was just called")
	}
	callInfo := struct {
		Teacher store.TeacherDetails
	}{
		Teacher: teacher,
	}
	mock.lockAddTeacher.Lock()
	mock.calls.AddTeacher = append(mock.calls.AddTeacher, callInfo)
	mock.lockAddTeacher.Unlock()
	return mock.AddTeacherFunc(teacher)
}

// AddTeacherCalls gets all the calls that were made to AddTeacher.
// Check the length with:
//     len(mockedInterface.AddTeacherCalls())
func (mock *InterfaceMock) AddTeacherCalls() []struct {
	Teacher store.TeacherDetails
} {
	var calls []struct {
		Teacher store.TeacherDetails
	}
	mock.lockAddTeacher.RLock()
	calls = mock.calls.AddTeacher
	mock.lockAddTeacher.RUnlock()
	return calls
}

// DeleteTeacher calls DeleteTeacherFunc.
func (mock *InterfaceMock) DeleteTeacher(teacherID string) error {
	if mock.DeleteTeacherFunc == nil {
		panic("InterfaceMock.DeleteTeacherFunc: method is nil but Interface.DeleteTeacher was just called")
	}
	callInfo := struct {
		TeacherID string
	}{
		TeacherID: teacherID,
	}
	mock.lockDeleteTeacher.Lock()
	mock.calls.DeleteTeacher = append(mock.calls.DeleteTeacher, callInfo)
	mock.lockDeleteTeacher.Unlock()
	return mock.DeleteTeacherFunc(teacherID)
}

// DeleteTeacherCalls gets all the calls that were made to DeleteTeacher.
// Check the length with:
//     len(mockedInterface.DeleteTeacherCalls())
func (mock *InterfaceMock) DeleteTeacherCalls() []struct {
	TeacherID string
} {
	var calls []struct {
		TeacherID string
	}
	mock.lockDeleteTeacher.RLock()
	calls = mock.calls.DeleteTeacher
	mock.lockDeleteTeacher.RUnlock()
	return calls
}

// GetTeacherDetails calls GetTeacherDetailsFunc.
func (mock *InterfaceMock) GetTeacherDetails(teacherID string) (store.TeacherDetails, error) {
	if mock.GetTeacherDetailsFunc == nil {
		panic("InterfaceMock.GetTeacherDetailsFunc: method is nil but Interface.GetTeacherDetails was just called")
	}
	callInfo := struct {
		TeacherID string
	}{
		TeacherID: teacherID,
	}
	mock.lockGetTeacherDetails.Lock()
	mock.calls.GetTeacherDetails = append(mock.calls.GetTeacherDetails, callInfo)
	mock.lockGetTeacherDetails.Unlock()
	return mock.GetTeacherDetailsFunc(teacherID)
}

// GetTeacherDetailsCalls gets all the calls that were made to GetTeacherDetails.
// Check the length with:
//     len(mockedInterface.GetTeacherDetailsCalls())
func (mock *InterfaceMock) GetTeacherDetailsCalls() []struct {
	TeacherID string
} {
	var calls []struct {
		TeacherID string
	}
	mock.lockGetTeacherDetails.RLock()
	calls = mock.calls.GetTeacherDetails
	mock.lockGetTeacherDetails.RUnlock()
	return calls
}

// GetTeacherFull calls GetTeacherFullFunc.
func (mock *InterfaceMock) GetTeacherFull(teacherID string) (store.Teacher, error) {
	if mock.GetTeacherFullFunc == nil {
		panic("InterfaceMock.GetTeacherFullFunc: method is nil but Interface.GetTeacherFull was just called")
	}
	callInfo := struct {
		TeacherID string
	}{
		TeacherID: teacherID,
	}
	mock.lockGetTeacherFull.Lock()
	mock.calls.GetTeacherFull = append(mock.calls.GetTeacherFull, callInfo)
	mock.lockGetTeacherFull.Unlock()
	return mock.GetTeacherFullFunc(teacherID)
}

// GetTeacherFullCalls gets all the calls that were made to GetTeacherFull.
// Check the length with:
//     len(mockedInterface.GetTeacherFullCalls())
func (mock *InterfaceMock) GetTeacherFullCalls() []struct {
	TeacherID string
} {
	var calls []struct {
		TeacherID string
	}
	mock.lockGetTeacherFull.RLock()
	calls = mock.calls.GetTeacherFull
	mock.lockGetTeacherFull.RUnlock()
	return calls
}

// ListTeachers calls ListTeachersFunc.
func (mock *InterfaceMock) ListTeachers() ([]store.TeacherDetails, error) {
	if mock.ListTeachersFunc == nil {
		panic("InterfaceMock.ListTeachersFunc: method is nil but Interface.ListTeachers was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListTeachers.Lock()
	mock.calls.ListTeachers = append(mock.calls.ListTeachers, callInfo)
	mock.lockListTeachers.Unlock()
	return mock.ListTeachersFunc()
}

// ListTeachersCalls gets all the calls that were made to ListTeachers.
// Check the length with:
//     len(mockedInterface.ListTeachersCalls())
func (mock *InterfaceMock) ListTeachersCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListTeachers.RLock()
	calls = mock.calls.ListTeachers
	mock.lockListTeachers.RUnlock()
	return calls
}

// SetPreferences calls SetPreferencesFunc.
func (mock *InterfaceMock) SetPreferences(teacherID string, pref store.TeacherPreferences) error {
	if mock.SetPreferencesFunc == nil {
		panic("InterfaceMock.SetPreferencesFunc: method is nil but Interface.SetPreferences was just called")
	}
	callInfo := struct {
		TeacherID string
		Pref      store.TeacherPreferences
	}{
		TeacherID: teacherID,
		Pref:      pref,
	}
	mock.lockSetPreferences.Lock()
	mock.calls.SetPreferences = append(mock.calls.SetPreferences, callInfo)
	mock.lockSetPreferences.Unlock()
	return mock.SetPreferencesFunc(teacherID, pref)
}

// SetPreferencesCalls gets all the calls that were made to SetPreferences.
// Check the length with:
//     len(mockedInterface.SetPreferencesCalls())
func (mock *InterfaceMock) SetPreferencesCalls() []struct {
	TeacherID string
	Pref      store.TeacherPreferences
} {
	var calls []struct {
		TeacherID string
		Pref      store.TeacherPreferences
	}
	mock.lockSetPreferences.RLock()
	calls = mock.calls.SetPreferences
	mock.lockSetPreferences.RUnlock()
	return calls
}
