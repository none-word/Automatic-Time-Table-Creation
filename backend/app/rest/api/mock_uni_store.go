// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"github.com/yaattc/automatic-time-table-creation/backend/app/store"
	"sync"
)

// Ensure, that uniStoreMock does implement uniStore.
// If this is not the case, regenerate this file with moq.
var _ uniStore = &uniStoreMock{}

// uniStoreMock is a mock implementation of uniStore.
//
//     func TestSomethingThatUsesuniStore(t *testing.T) {
//
//         // make and configure a mocked uniStore
//         mockeduniStore := &uniStoreMock{
//             AddGroupFunc: func(name string, studyYearID string) (string, error) {
// 	               panic("mock out the AddGroup method")
//             },
//             AddStudyYearFunc: func(name string) (string, error) {
// 	               panic("mock out the AddStudyYear method")
//             },
//             DeleteGroupFunc: func(id string) error {
// 	               panic("mock out the DeleteGroup method")
//             },
//             DeleteStudyYearFunc: func(studyYearID string) error {
// 	               panic("mock out the DeleteStudyYear method")
//             },
//             GetGroupFunc: func(groupID string) (store.Group, error) {
// 	               panic("mock out the GetGroup method")
//             },
//             GetStudyYearFunc: func(id string) (store.StudyYear, error) {
// 	               panic("mock out the GetStudyYear method")
//             },
//             ListGroupsFunc: func() ([]store.Group, error) {
// 	               panic("mock out the ListGroups method")
//             },
//             ListStudyYearsFunc: func() ([]store.StudyYear, error) {
// 	               panic("mock out the ListStudyYears method")
//             },
//             ListTimeSlotsFunc: func() ([]store.TimeSlot, error) {
// 	               panic("mock out the ListTimeSlots method")
//             },
//         }
//
//         // use mockeduniStore in code that requires uniStore
//         // and then make assertions.
//
//     }
type uniStoreMock struct {
	// AddGroupFunc mocks the AddGroup method.
	AddGroupFunc func(name string, studyYearID string) (string, error)

	// AddStudyYearFunc mocks the AddStudyYear method.
	AddStudyYearFunc func(name string) (string, error)

	// DeleteGroupFunc mocks the DeleteGroup method.
	DeleteGroupFunc func(id string) error

	// DeleteStudyYearFunc mocks the DeleteStudyYear method.
	DeleteStudyYearFunc func(studyYearID string) error

	// GetGroupFunc mocks the GetGroup method.
	GetGroupFunc func(groupID string) (store.Group, error)

	// GetStudyYearFunc mocks the GetStudyYear method.
	GetStudyYearFunc func(id string) (store.StudyYear, error)

	// ListGroupsFunc mocks the ListGroups method.
	ListGroupsFunc func() ([]store.Group, error)

	// ListStudyYearsFunc mocks the ListStudyYears method.
	ListStudyYearsFunc func() ([]store.StudyYear, error)

	// ListTimeSlotsFunc mocks the ListTimeSlots method.
	ListTimeSlotsFunc func() ([]store.TimeSlot, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddGroup holds details about calls to the AddGroup method.
		AddGroup []struct {
			// Name is the name argument value.
			Name string
			// StudyYearID is the studyYearID argument value.
			StudyYearID string
		}
		// AddStudyYear holds details about calls to the AddStudyYear method.
		AddStudyYear []struct {
			// Name is the name argument value.
			Name string
		}
		// DeleteGroup holds details about calls to the DeleteGroup method.
		DeleteGroup []struct {
			// ID is the id argument value.
			ID string
		}
		// DeleteStudyYear holds details about calls to the DeleteStudyYear method.
		DeleteStudyYear []struct {
			// StudyYearID is the studyYearID argument value.
			StudyYearID string
		}
		// GetGroup holds details about calls to the GetGroup method.
		GetGroup []struct {
			// GroupID is the groupID argument value.
			GroupID string
		}
		// GetStudyYear holds details about calls to the GetStudyYear method.
		GetStudyYear []struct {
			// ID is the id argument value.
			ID string
		}
		// ListGroups holds details about calls to the ListGroups method.
		ListGroups []struct {
		}
		// ListStudyYears holds details about calls to the ListStudyYears method.
		ListStudyYears []struct {
		}
		// ListTimeSlots holds details about calls to the ListTimeSlots method.
		ListTimeSlots []struct {
		}
	}
	lockAddGroup        sync.RWMutex
	lockAddStudyYear    sync.RWMutex
	lockDeleteGroup     sync.RWMutex
	lockDeleteStudyYear sync.RWMutex
	lockGetGroup        sync.RWMutex
	lockGetStudyYear    sync.RWMutex
	lockListGroups      sync.RWMutex
	lockListStudyYears  sync.RWMutex
	lockListTimeSlots   sync.RWMutex
}

// AddGroup calls AddGroupFunc.
func (mock *uniStoreMock) AddGroup(name string, studyYearID string) (string, error) {
	if mock.AddGroupFunc == nil {
		panic("uniStoreMock.AddGroupFunc: method is nil but uniStore.AddGroup was just called")
	}
	callInfo := struct {
		Name        string
		StudyYearID string
	}{
		Name:        name,
		StudyYearID: studyYearID,
	}
	mock.lockAddGroup.Lock()
	mock.calls.AddGroup = append(mock.calls.AddGroup, callInfo)
	mock.lockAddGroup.Unlock()
	return mock.AddGroupFunc(name, studyYearID)
}

// AddGroupCalls gets all the calls that were made to AddGroup.
// Check the length with:
//     len(mockeduniStore.AddGroupCalls())
func (mock *uniStoreMock) AddGroupCalls() []struct {
	Name        string
	StudyYearID string
} {
	var calls []struct {
		Name        string
		StudyYearID string
	}
	mock.lockAddGroup.RLock()
	calls = mock.calls.AddGroup
	mock.lockAddGroup.RUnlock()
	return calls
}

// AddStudyYear calls AddStudyYearFunc.
func (mock *uniStoreMock) AddStudyYear(name string) (string, error) {
	if mock.AddStudyYearFunc == nil {
		panic("uniStoreMock.AddStudyYearFunc: method is nil but uniStore.AddStudyYear was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockAddStudyYear.Lock()
	mock.calls.AddStudyYear = append(mock.calls.AddStudyYear, callInfo)
	mock.lockAddStudyYear.Unlock()
	return mock.AddStudyYearFunc(name)
}

// AddStudyYearCalls gets all the calls that were made to AddStudyYear.
// Check the length with:
//     len(mockeduniStore.AddStudyYearCalls())
func (mock *uniStoreMock) AddStudyYearCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockAddStudyYear.RLock()
	calls = mock.calls.AddStudyYear
	mock.lockAddStudyYear.RUnlock()
	return calls
}

// DeleteGroup calls DeleteGroupFunc.
func (mock *uniStoreMock) DeleteGroup(id string) error {
	if mock.DeleteGroupFunc == nil {
		panic("uniStoreMock.DeleteGroupFunc: method is nil but uniStore.DeleteGroup was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockDeleteGroup.Lock()
	mock.calls.DeleteGroup = append(mock.calls.DeleteGroup, callInfo)
	mock.lockDeleteGroup.Unlock()
	return mock.DeleteGroupFunc(id)
}

// DeleteGroupCalls gets all the calls that were made to DeleteGroup.
// Check the length with:
//     len(mockeduniStore.DeleteGroupCalls())
func (mock *uniStoreMock) DeleteGroupCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockDeleteGroup.RLock()
	calls = mock.calls.DeleteGroup
	mock.lockDeleteGroup.RUnlock()
	return calls
}

// DeleteStudyYear calls DeleteStudyYearFunc.
func (mock *uniStoreMock) DeleteStudyYear(studyYearID string) error {
	if mock.DeleteStudyYearFunc == nil {
		panic("uniStoreMock.DeleteStudyYearFunc: method is nil but uniStore.DeleteStudyYear was just called")
	}
	callInfo := struct {
		StudyYearID string
	}{
		StudyYearID: studyYearID,
	}
	mock.lockDeleteStudyYear.Lock()
	mock.calls.DeleteStudyYear = append(mock.calls.DeleteStudyYear, callInfo)
	mock.lockDeleteStudyYear.Unlock()
	return mock.DeleteStudyYearFunc(studyYearID)
}

// DeleteStudyYearCalls gets all the calls that were made to DeleteStudyYear.
// Check the length with:
//     len(mockeduniStore.DeleteStudyYearCalls())
func (mock *uniStoreMock) DeleteStudyYearCalls() []struct {
	StudyYearID string
} {
	var calls []struct {
		StudyYearID string
	}
	mock.lockDeleteStudyYear.RLock()
	calls = mock.calls.DeleteStudyYear
	mock.lockDeleteStudyYear.RUnlock()
	return calls
}

// GetGroup calls GetGroupFunc.
func (mock *uniStoreMock) GetGroup(groupID string) (store.Group, error) {
	if mock.GetGroupFunc == nil {
		panic("uniStoreMock.GetGroupFunc: method is nil but uniStore.GetGroup was just called")
	}
	callInfo := struct {
		GroupID string
	}{
		GroupID: groupID,
	}
	mock.lockGetGroup.Lock()
	mock.calls.GetGroup = append(mock.calls.GetGroup, callInfo)
	mock.lockGetGroup.Unlock()
	return mock.GetGroupFunc(groupID)
}

// GetGroupCalls gets all the calls that were made to GetGroup.
// Check the length with:
//     len(mockeduniStore.GetGroupCalls())
func (mock *uniStoreMock) GetGroupCalls() []struct {
	GroupID string
} {
	var calls []struct {
		GroupID string
	}
	mock.lockGetGroup.RLock()
	calls = mock.calls.GetGroup
	mock.lockGetGroup.RUnlock()
	return calls
}

// GetStudyYear calls GetStudyYearFunc.
func (mock *uniStoreMock) GetStudyYear(id string) (store.StudyYear, error) {
	if mock.GetStudyYearFunc == nil {
		panic("uniStoreMock.GetStudyYearFunc: method is nil but uniStore.GetStudyYear was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetStudyYear.Lock()
	mock.calls.GetStudyYear = append(mock.calls.GetStudyYear, callInfo)
	mock.lockGetStudyYear.Unlock()
	return mock.GetStudyYearFunc(id)
}

// GetStudyYearCalls gets all the calls that were made to GetStudyYear.
// Check the length with:
//     len(mockeduniStore.GetStudyYearCalls())
func (mock *uniStoreMock) GetStudyYearCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetStudyYear.RLock()
	calls = mock.calls.GetStudyYear
	mock.lockGetStudyYear.RUnlock()
	return calls
}

// ListGroups calls ListGroupsFunc.
func (mock *uniStoreMock) ListGroups() ([]store.Group, error) {
	if mock.ListGroupsFunc == nil {
		panic("uniStoreMock.ListGroupsFunc: method is nil but uniStore.ListGroups was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListGroups.Lock()
	mock.calls.ListGroups = append(mock.calls.ListGroups, callInfo)
	mock.lockListGroups.Unlock()
	return mock.ListGroupsFunc()
}

// ListGroupsCalls gets all the calls that were made to ListGroups.
// Check the length with:
//     len(mockeduniStore.ListGroupsCalls())
func (mock *uniStoreMock) ListGroupsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListGroups.RLock()
	calls = mock.calls.ListGroups
	mock.lockListGroups.RUnlock()
	return calls
}

// ListStudyYears calls ListStudyYearsFunc.
func (mock *uniStoreMock) ListStudyYears() ([]store.StudyYear, error) {
	if mock.ListStudyYearsFunc == nil {
		panic("uniStoreMock.ListStudyYearsFunc: method is nil but uniStore.ListStudyYears was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListStudyYears.Lock()
	mock.calls.ListStudyYears = append(mock.calls.ListStudyYears, callInfo)
	mock.lockListStudyYears.Unlock()
	return mock.ListStudyYearsFunc()
}

// ListStudyYearsCalls gets all the calls that were made to ListStudyYears.
// Check the length with:
//     len(mockeduniStore.ListStudyYearsCalls())
func (mock *uniStoreMock) ListStudyYearsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListStudyYears.RLock()
	calls = mock.calls.ListStudyYears
	mock.lockListStudyYears.RUnlock()
	return calls
}

// ListTimeSlots calls ListTimeSlotsFunc.
func (mock *uniStoreMock) ListTimeSlots() ([]store.TimeSlot, error) {
	if mock.ListTimeSlotsFunc == nil {
		panic("uniStoreMock.ListTimeSlotsFunc: method is nil but uniStore.ListTimeSlots was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListTimeSlots.Lock()
	mock.calls.ListTimeSlots = append(mock.calls.ListTimeSlots, callInfo)
	mock.lockListTimeSlots.Unlock()
	return mock.ListTimeSlotsFunc()
}

// ListTimeSlotsCalls gets all the calls that were made to ListTimeSlots.
// Check the length with:
//     len(mockeduniStore.ListTimeSlotsCalls())
func (mock *uniStoreMock) ListTimeSlotsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListTimeSlots.RLock()
	calls = mock.calls.ListTimeSlots
	mock.lockListTimeSlots.RUnlock()
	return calls
}
